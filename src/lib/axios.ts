import axios from 'axios';
import { refreshToken } from "./auth"; // –æ–∫—Ä–µ–º–∏–π –º–æ–¥—É–ª—å –∑ –ª–æ–≥—ñ–∫–æ—é –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞

// üì¶ –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω—Å—Ç–∞–Ω—Å axios –∑ –±–∞–∑–æ–≤–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
const axiosInstance = axios.create({
  baseURL: process.env.NEXT_PUBLIC_API_URL, // http://127.0.0.1:8000/api
  headers: {
    'Content-Type': 'application/json',
  },
});

// ‚úÖ INTERCEPTOR #1: –î–æ–¥–∞—î–º–æ —Ç–æ–∫–µ–Ω –¥–æ –∫–æ–∂–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É
axiosInstance.interceptors.request.use(
  (config) => {
    // console.log('config', config); // –î–µ–±–∞–≥
    // const token = localStorage.getItem('token');
    // –ó–∞—Ö–∏—Å—Ç: –∫–æ–¥ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ª–∏—à–µ –≤ –±—Ä–∞—É–∑–µ—Ä—ñ
    const token = typeof window !== 'undefined' ? localStorage.getItem('token') : null;
    if (token && config.headers) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    // –Ø–∫—â–æ —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—ñ–¥ —á–∞—Å —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É
    console.error("Request interceptor error", error);
    return Promise.reject(error);
  }
);

// ‚úÖ INTERCEPTOR #2: –û–±—Ä–æ–±–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ, –∑–æ–∫—Ä–µ–º–∞ 401 –ø–æ–º–∏–ª–∫–∏ (—Ç–æ–∫–µ–Ω –ø—Ä–æ—Ç–µ—Ä–º—ñ–Ω—É–≤–∞–≤—Å—è)
axiosInstance.interceptors.response.use(
  (response) => response,
  async (error) => {
    const originalRequest = error.config;

    // –Ø–∫—â–æ —Ç–æ–∫–µ–Ω –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π –∞–±–æ –ø—Ä–æ—Ç–µ—Ä–º—ñ–Ω—É–≤–∞–≤—Å—è, —ñ —â–µ –Ω–µ –±—É–ª–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó —Å–ø—Ä–æ–±–∏
    if (error.response?.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true;

      try {
        const newToken = await refreshToken();

        if (newToken) {
          // üîÅ –ü—ñ–¥—Å—Ç–∞–≤–ª—è—î–º–æ –Ω–æ–≤–∏–π —Ç–æ–∫–µ–Ω —É –∑–∞–ø–∏—Ç —ñ –ø—Ä–æ–±—É—î–º–æ —â–µ —Ä–∞–∑
          originalRequest.headers.Authorization = `Bearer ${newToken}`;
          return axiosInstance(originalRequest);
        } else {
          // ‚ùå –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ ‚Äî –≤–∏–¥–∞–ª—è—î–º–æ —Ç–æ–∫–µ–Ω —ñ –ø–µ—Ä–µ–∫–∏–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
          localStorage.removeItem("token");
          localStorage.removeItem("user");
          window.location.href = "/";
        }
      } catch (err) {
        console.error("Auto refresh failed", err);
        return Promise.reject(err);
      }
    }

    return Promise.reject(error);
  }
);

export default axiosInstance;
